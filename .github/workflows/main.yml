name: "Terraform action moviechannel-api"
on:
  push:
    branches:
      - main
  pull_request:
permissions:
  id-token: write # This is required for aws oidc connections (Try 4)
  contents: read # This is required for actions/checkout
  pull-requests: write # This is required for gh bot to comment PR
jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_OIDC_ARN }}
          role-session-name: ${{ secrets.AWS_OIDC_SESSION_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1
      #
      # - name: Build connect ECR
      #   uses: int128/create-ecr-repository-action@v1
      #   id: connect-ecr
      #   with:
      #     repository: ${{ secrets.AWS_ECR_NAME_CONNECT }}
      #
      # - name: Build, tag, and push connect image to Amazon ECR
      #   id: build-image-connect
      #   env:
      #     AWS_ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     AWS_IMAGE_TAG: ${{ github.sha }}
      #     AWS_ECR_REPOSITORY: ${{ secrets.AWS_ECR_NAME_CONNECT }}
      #   run: |
      #     docker build -t $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_IMAGE_TAG --target $AWS_ECR_REPOSITORY .
      #     docker push $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_IMAGE_TAG
      #     echo "::set-output name=image::$AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_IMAGE_TAG"
      #
      # - name: Build disconnect ECR
      #   uses: int128/create-ecr-repository-action@v1
      #   id: disconnect-ecr
      #   with:
      #     repository: ${{ secrets.AWS_ECR_NAME_DISCONNECT }}
      #
      # - name: Build, tag, and push disconnect image to Amazon ECR
      #   id: build-image-disconnect
      #   env:
      #     AWS_ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     AWS_IMAGE_TAG: ${{ github.sha }}
      #     AWS_ECR_REPOSITORY: ${{ secrets.AWS_ECR_NAME_DISCONNECT }}
      #   run: |
      #     docker build -t $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_IMAGE_TAG --target $AWS_ECR_REPOSITORY .
      #     docker push $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_IMAGE_TAG
      #     echo "::set-output name=image::$AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_IMAGE_TAG"
      #
      # - name: Build sendmovie ECR
      #   uses: int128/create-ecr-repository-action@v1
      #   id: sendmovie-ecr
      #   with:
      #     repository: ${{ secrets.AWS_ECR_NAME_SENDMOVIE }}
      #
      # - name: Build, tag, and push sendmovie image to Amazon ECR
      #   id: build-image-sendmovie
      #   env:
      #     AWS_ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     AWS_IMAGE_TAG: ${{ github.sha }}
      #     AWS_ECR_REPOSITORY: ${{ secrets.AWS_ECR_NAME_SENDMOVIE }}
      #   run: |
      #     docker build -t $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_IMAGE_TAG --target $AWS_ECR_REPOSITORY .
      #     docker push $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_IMAGE_TAG
      #     echo "::set-output name=image::$AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_IMAGE_TAG"
      #
      # - name: Build getmovie ECR
      #   uses: int128/create-ecr-repository-action@v1
      #   id: getmovies-ecr
      #   with:
      #     repository: ${{ secrets.AWS_ECR_NAME_GETMOVIES }}
      #
      # - name: Build, tag, and push getmovies image to Amazon ECR
      #   id: build-image-getmovies
      #   env:
      #     AWS_ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     AWS_IMAGE_TAG: ${{ github.sha }}
      #     AWS_ECR_REPOSITORY: ${{ secrets.AWS_ECR_NAME_GETMOVIES }}
      #   run: |
      #     docker build -t $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_IMAGE_TAG --target $AWS_ECR_REPOSITORY .
      #     docker push $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_IMAGE_TAG
      #     echo "::set-output name=image::$AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$AWS_IMAGE_TAG"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.0
          # working-directory: ./terraform

      - name: Terraform fmt
        id: fmt
        # working-directory: ./terraform
        run: terraform fmt -check ./terraform
        continue-on-error: true

      - name: Terraform Init
        id: init
        working-directory: ./terraform
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_TFSTATE_S3_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_TFSTATE_KEY_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: >
          terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" 
          -backend-config="key=${AWS_BUCKET_KEY_NAME}" 
          -backend-config="region=${AWS_REGION}"

      # - name: Terraform Destroy
      #   id: destroy
      #   working-directory: ./terraform
      #   run: terraform destroy -auto-approve -input=false
      #   env:
      #     TF_VAR_aws_region: ${{ secrets.AWS_REGION }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        working-directory: ./terraform
        run: terraform plan -no-color
        if: github.event_name == 'pull_request'

      - name: Terraform Run
        id: run
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Plan Status
        id: status
        working-directory: ./terraform
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # - name: Terraform Apply
      #   id: apply
      #   working-directory: ./terraform
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: terraform apply -auto-approve -input=false
      #   env:
      #     TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      #     TF_VAR_image_tag: ${{ github.sha }}

      - name: Terraform Destroy
        id: destroy
        working-directory: ./terraform
        run: terraform destroy -auto-approve -input=false
        env:
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_image_tag: ${{ github.sha }}
